//==================================================================================================
//
// Author: Jens Chluba 
// first implementation: April 2012
//
//==================================================================================================
#include <iostream>
#include "Relativistic_MB.h"
#include "physical_consts.h"
#include "gsl/gsl_sf_bessel.h"

//==================================================================================================
// namespaces
//==================================================================================================
using namespace std;

//==================================================================================================
//
// relativistic Maxwell-Boltzmann distribution function
//
//==================================================================================================
double f_RM(double xi, double The){ return sqrt(xi)*exp( -2.0*xi/(sqrt(1.0+2.0*The*xi)+1.0) ); }

//==================================================================================================
// norm factor (sqrt(2 The)*The) exp(-1/The)/( 4 pi The K_2(1/The) ) in convenient form
//==================================================================================================
double norm_f_RM(double The)
{
    if(1.0/The<=200.0) return sqrt(2.0*The)*exp(-1.0/The)/(FOURPI*gsl_sf_bessel_Kn(2, 1.0/The));
    
    return (1.0+(-15.0/8.0+(345.0/128.0+(-3285.0/1024.0+95355.0/32768.0*The)*The)*The)*The)
            /TWOPI/SQRT_PI;
}

//==================================================================================================
//
// relativistic Maxwell-Boltzmann distribution function (function of gamma=1/sqrt(1-beta^2)
//
//==================================================================================================
double f_RM_gamma(double gamma, double The){ return exp( -(gamma-1.0)/The ); }

double norm_f_RM_gamma(double The)
{
    if(1.0/The<=200.0) return exp(-1.0/The)/(The*gsl_sf_bessel_Kn(2, 1.0/The));
    
    return (1.0+(-15.0/8.0+(345.0/128+(-3285.0/1024+95355.0/32768*The)*The)*The)*The)
            *sqrt(2.0/PI/The)/The;
}

//==================================================================================================
//
// derivatives of f_RM==sqrt(xi)*exp(-Dgamma/Theta) with respect to Theta
//
//==================================================================================================
double aderivs_0[21][21]={
    {-1., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., -0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., -1., 0.16666666666666666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., -1.5, 0.5, -0.041666666666666664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., -2., 1., -0.16666666666666666, 0.008333333333333333, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., -2.5, 1.6666666666666667, -0.4166666666666667, 0.041666666666666664, 
        -0.001388888888888889, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., -3., 2.5, -0.8333333333333334, 0.125, -0.008333333333333333, 
        0.0001984126984126984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., -3.5, 3.5, -1.4583333333333333, 0.2916666666666667, -0.029166666666666667, 
        0.001388888888888889, -0.0000248015873015873, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., -4., 4.666666666666667, -2.3333333333333335, 0.5833333333333334, 
        -0.07777777777777778, 0.005555555555555556, -0.0001984126984126984, 
        2.7557319223985893e-6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., -4.5, 6., -3.5, 1.05, -0.175, 0.016666666666666666, -0.0008928571428571428, 
        0.0000248015873015873, -2.755731922398589e-7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., -5., 7.5, -5., 1.75, -0.35, 0.041666666666666664, -0.002976190476190476, 
        0.0001240079365079365, -2.7557319223985893e-6, 2.505210838544172e-8, 
        0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., -5.5, 9.166666666666666, -6.875, 2.75, -0.6416666666666667, 
        0.09166666666666666, -0.00818452380952381, 0.00045469576719576717, 
        -0.00001515652557319224, 2.755731922398589e-7, -2.08767569878681e-9, 
        0, 0, 0, 0, 0, 0, 0, 0},
    {0, 1., -6., 11., -9.166666666666666, 4.125, -1.1, 0.18333333333333332, 
        -0.019642857142857142, 0.0013640873015873015, -0.00006062610229276896, 
        1.6534391534391535e-6, -2.505210838544172e-8, 1.6059043836821613e-10, 
        0, 0, 0, 0, 0, 0, 0},
    {0, 1., -6.5, 13., -11.916666666666666, 5.958333333333333, -1.7875, 0.3404761904761905, 
        -0.04255952380952381, 0.003546626984126984, -0.00019703483245149913, 
        7.164902998236331e-6, -1.6283870450537117e-7, 2.08767569878681e-9, 
        -1.1470745597729725e-11, 0, 0, 0, 0, 0, 0},
    {0, 1., -7., 15.166666666666666, -15.166666666666666, 8.341666666666667, 
        -2.7805555555555554, 0.5958333333333333, -0.08511904761904762, 0.008275462962962964, 
        -0.0005516975308641975, 0.00002507716049382716, -7.599139543583988e-7, 
        1.4613729891507668e-8, -1.6059043836821613e-10, 7.647163731819816e-13, 0, 0, 0, 0, 0},
    {0, 1., -7.5, 17.5, -18.958333333333332, 11.375, -4.170833333333333, 0.9930555555555556, 
        -0.15959821428571427, 0.01773313492063492, -0.0013792438271604938, 0.00007523148148148149, 
        -2.8496773288439954e-6, 7.306864945753835e-8, -1.2044282877616211e-9, 
        1.1470745597729725e-11, -4.779477332387385e-14, 0, 0, 0, 0},
    {0, 1., -8., 20., -23.333333333333332, 15.166666666666666, -6.066666666666666, 
        1.5888888888888888, -0.2837301587301587, 0.03546626984126984, -0.003152557319223986, 
        0.00020061728395061727, -9.118967452300786e-6, 2.922745978301534e-7, 
        -6.423617534728646e-9, 9.17659647818378e-11, -7.647163731819816e-13, 
        2.8114572543455206e-15, 0, 0, 0},
    {0, 1., -8.5, 22.666666666666668, -28.333333333333332, 19.833333333333332, 
        -8.594444444444445, 2.4555555555555557, -0.48234126984126985, 0.0669918430335097, 
        -0.00669918430335097, 0.00048721340388007057, -0.00002583707444818556, 
        9.937336326225215e-7, -2.7300374522596746e-8, 5.200071337637476e-10, 
        -6.500089172046844e-12, 4.779477332387385e-14, -1.5619206968586225e-16, 0, 0},
    {0, 1., -9., 25.5, -34., 25.5, -11.9, 3.683333333333333, -0.7892857142857143, 
        0.12058531746031746, -0.01339836860670194, 0.0010962301587301587, -0.00006643819143819143, 
        2.9812008978675647e-6, -9.828134828134828e-8, 2.3400321019368638e-9, 
        -3.9000535032281066e-11, 4.301529599148647e-13, -2.8114572543455206e-15, 
        8.22063524662433e-18, 0},
    {0, 1., -9.5, 28.5, -40.375, 32.3, -16.15, 5.383333333333334, -1.2497023809523808, 
        0.20828373015873017, -0.025456900352733687, 0.002314263668430335, 
        -0.00015779070466570466, 8.091831008497676e-6, -3.112242695576029e-7, 
        8.892121987360083e-9, -1.8525254140333504e-10, 2.7243020794608098e-12, 
        -2.6708843916282446e-14, 1.5619206968586225e-16, -4.110317623312165e-19}
};

//==================================================================================================
double df_RM_dTheta(double xivar, double The, int k)
{
    if(k>20){ cerr << " extend derivative table ..." << endl; exit(0); }
    
    double xi=2.0*xivar/(sqrt(1.0+2.0*The*xivar)+1.0);
    
    double r=sqrt(xivar)*exp(-xi)*pow(-1.0, k+1); // returning result multiplied with The^(k+1); 
    
    double f=0.0;
    for(int l=k; l>0; l--) f=(aderivs_0[k][l]+f)*xi;
    f+=aderivs_0[k][0];
    
    return r*f*sqrt(2.0*The)*The/FOURPI;
}

//==================================================================================================
double norm_df_RM_dTheta(double The)
{
    if(1.0/The<=200.0) return exp(-1.0/The)/(The*gsl_sf_bessel_Kn(2, 1.0/The));
    
    return (1.0+(-15.0/8.0+(345.0/128+(-3285.0/1024+95355.0/32768*The)*The)*The)*The)
               *sqrt(2.0/PI/The)/The;
}

//==================================================================================================
//==================================================================================================